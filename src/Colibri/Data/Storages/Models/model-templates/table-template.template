<?php

namespace [[namespace-path]];

use Colibri\Data\DataAccessPoint;
use Colibri\Data\SqlClient\IDataReader;
use Colibri\Data\Storages\Storages;
use Colibri\Data\Storages\Storage;
use Colibri\Utils\Logs\Logger;
use Colibri\Data\SqlClient\QueryInfo;
use [[parent-table-class-name]] as BaseModelDataTable;
use [[namespace-path]]\[[row-class-name]];

/**
 * Table class of [[storage-desc]] storage
 * @author <author name and email>
 * @package [[namespace-path]]
 * 
 * @method [[row-class-name]][] getIterator()
 * @method [[row-class-name]] _createDataRowObject()
 * @method [[row-class-name]] _read()
 * @method [[row-class-name]] offsetGet(mixed $offset)
 * 
 */
class [[table-class-name]] extends BaseModelDataTable 
{

    /**
     * Constructor
     * @param DataAccessPoint $point data access point
     * @param IDataReader|null $reader sql reader
     * @param string|\Closure $returnAs return as this class
     * @param Storage|null $storage storage object
     * @return void 
     */
    public function __construct(
        DataAccessPoint $point, 
        ?IDataReader $reader = null, 
        string $returnAs = '[[row-class-name]]', 
        Storage|null $storage = null
    )
    {
        parent::__construct($point, $reader, $returnAs, $storage);
    }

    
    /**
     * Create table by filters and sort
     * @param int $page page
     * @param int $pagesize page size
     * @param string $filter filters string
     * @param string $order sort order
     * @param array $params params
     * @param bool $calculateAffected if needed to return affected, default true
     * @return [[table-class-name]]
     */
    public static function LoadByFilter(
        int $page = -1, 
        int $pagesize = 20, 
        ?string $filter = null, 
        ?string $order = null, 
        array $params = [], 
        bool $calculateAffected = true
    ) : ?[[table-class-name]]
    {
        $storage = Storages::Instance()->Load('[[storage-name]]', '[[module-name]]');
        return parent::_loadByFilter($storage, $page, $pagesize, $filter, $order, $params, $calculateAffected);
    }

    /**
     * Create table by any filters
     * @param int $page page
     * @param int $pagesize page size
     * @param ?array $filtersArray filters array|object
     * @param string $sortField sort field
     * @param string $sortOrder sort order, default asc
     * @param bool $calculateAffected if needed to return affected, default true
     * @return ?[[table-class-name]]
     */
    public static function LoadBy(
        int $page = -1, 
        int $pagesize = 20, 
        ?string $searchTerm = null,
        ?array $filtersArray = null,
        ?string $sortField = null,
        string $sortOrder = 'asc', 
        bool $calculateAffected = true
    ) : ?[[table-class-name]]
    {
        $storage = Storages::Instance()->Load('[[storage-name]]', '[[module-name]]');
        [$filter, $order, $params] = $storage->accessPoint->ProcessFilters($storage, $searchTerm, $filtersArray, $sortField, $sortOrder);
        return parent::_loadByFilter($storage, $page, $pagesize, $filter, $order, $params, $calculateAffected);
    }

    /**
     * Loads all rows from table
     * @param int $page page
     * @param int $pagesize page size
     * @return [[table-class-name]] 
     */
    public static function LoadAll(
        int $page = -1, 
        int $pagesize = 20, 
        bool $calculateAffected = false
    ) : ?[[table-class-name]]
    {
        return self::LoadByFilter($page, $pagesize, null, null, [], $calculateAffected);
    }

    /**
     * Returns row model by ID
     * @param int $id ID of the row to fetch
     * @return [[row-class-name]]|null
     */
    public static function LoadById(int $id) : [[row-class-name]]|null 
    {
        $table = self::LoadByFilter(1, 1, '{id}=[[id:integer]]', null, ['id' => $id], false);
        return $table && $table->Count() > 0 ? $table->First() : null;
    }

    /**
     * Returns an empty row object
     * @return [[row-class-name]]
     */
    public static function LoadEmpty() : [[row-class-name]]
    {
        $table = self::LoadByFilter(-1, 20, '{id}=0', null, [], false);
        return $table->CreateEmptyRow();
    }

    /**
     * Deletes a rows by array of ID
     * @param int[] $ids ID array of ID
     * @return bool
     */
    public static function DeleteAllByIds(array $ids): bool
    {
        return self::DeleteAllByFilter('{id} in ('.implode(',', $ids).')');
    }

    /**
     * Restores a rows by array of ID, works only in softdelete mode
     * @param int[] $ids array of ID
     * @return bool
     */
    public static function RestoreAllByIds(array $ids): bool
    {
        $storage = Storages::Instance()->Load('[[storage-name]]', '[[module-name]]');
        return self::RestoreByFilter($storage, '{id} in ('.implode(',', $ids).')');
    }

    /**
     * Deletes a rows by filter
     * @param string $filter filter string, {field} form can be used
     * @return bool
     */
    public static function DeleteAllByFilter(string $filter): bool
    {
        $storage = Storages::Instance()->Load('[[storage-name]]', '[[module-name]]');
        return self::DeleteByFilter($storage, $filter);
    }

    /**
     * Migrates an object
     * @param ?Logger $logger
     */
    public static function DataMigrate(?Logger $logger = null): bool
    {
        return true;
    }

}