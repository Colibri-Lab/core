<?php

namespace [[namespace-path]];

use Colibri\Data\DataAccessPoint;
use Colibri\Data\NoSqlClient\ICommandResult;
use Colibri\Data\Storages\Storages;
use Colibri\Data\Storages\Storage;
use Colibri\Utils\Logs\Logger;
use [[parent-table-class-name]] as BaseModelDataCollection;
use [[namespace-path]]\[[row-class-name]];

/**
 * Collection class of [[storage-desc]] storage
 * @author <author name and email>
 * @package [[namespace-path]]
 * 
 * @method [[row-class-name]][] getIterator()
 * @method [[row-class-name]] _createDataRowObject()
 * @method [[row-class-name]] _read()
 * @method [[row-class-name]] offsetGet(mixed $offset)
 * 
 */
class [[table-class-name]] extends BaseModelDataCollection 
{

    /**
     * Constructor
     * @param DataAccessPoint $point data access point
     * @param ICommandResult|null $reader query result 
     * @param string|\Closure $returnAs return row as class
     * @param Storage|null $storage storage object
     * @return void 
     */
    public function __construct(
        DataAccessPoint $point, 
        ?ICommandResult $reader = null, 
        string $returnAs = '[[row-class-name]]', 
        Storage|null $storage = null
    )
    {
        parent::__construct($point, $reader, $returnAs, $storage);
    }

    
    /**
     * Creates a collection object by filters
     * @param int $page page
     * @param int $pagesize page size
     * @param ?array $query query object
     * @param ?array $filter filters object
     * @param ?array $order order object
     * @return [[table-class-name]]
     */
    public static function LoadByFilter(
        int $page = -1,
        int $pagesize = 20,
        ?array $query = null,
        ?array $filter = null,
        ?array $order = null
    ) : ?[[table-class-name]]
    {
        $storage = Storages::Create()->Load('[[storage-name]]', '[[module-name]]');
        return parent::_loadByFilter($storage, $page, $pagesize, $query, $filter, $order);
    }

    
    /**
     * Create table by any filters
     * @param int $page page
     * @param int $pagesize page size
     * @param ?array $filtersArray filters array|object
     * @param string $sortField sort field
     * @param string $sortOrder sort order, default asc
     * @param bool $calculateAffected if needed to return affected, default true
     * @return [[table-class-name]]
     */
    public static function LoadBy(
        int $page = -1, 
        int $pagesize = 20, 
        ?string $searchTerm = null,
        ?array $filtersArray = null,
        ?string $sortField = null,
        string $sortOrder = 'asc'
    ) : ?[[table-class-name]]
    {
        $storage = Storages::Create()->Load('[[storage-name]]', '[[module-name]]');
        [$query, $filters, $order] = $storage->accessPoint->ProcessFilters($storage, $searchTerm, $filtersArray, $sortField, $sortOrder);
        return parent::_loadByFilter($storage, $page, $pagesize, $query, $filters, $order);
    }

    /**
     * Returns all documents in collection
     * @param int $page page
     * @param int $pagesize page size
     * @return [[table-class-name]] 
     */
    public static function LoadAll(
        int $page = -1, 
        int $pagesize = 20
    ) : ?[[table-class-name]]
    {
        return self::LoadByFilter($page, $pagesize);
    }

    /**
     * Returns a row document by ID
     * @param int $id ID id of document
     * @return [[row-class-name]]|null
     */
    public static function LoadById(int $id) : [[row-class-name]]|null 
    {
        $table = self::LoadByFilter(1, 1, ['id' => $id], null);
        return $table && $table->Count() > 0 ? $table->First() : null;
    }

    /**
     * Creates an empty document
     * @return [[row-class-name]]
     */
    public static function LoadEmpty() : [[row-class-name]]
    {
        $table = self::LoadByFilter(-1, 20, ['id' => null], null);
        return $table->CreateEmptyRow();
    }

    /**
     * Deletes a rows by array of ID 
     * @param int[] $ids array of ID
     * @return bool
     */
    public static function DeleteAllByIds(array $ids): bool
    {
        return self::DeleteAllByFilter(['id' => array_map(fn($v) => (int)$v, $ids)]);
    }

    /**
     * Restores a rows by array of ID, works only in softdelete mode
     * @param int[] $ids array of ID
     * @return bool
     */
    public static function RestoreAllByIds(array $ids): bool
    {
        $storage = Storages::Create()->Load('[[storage-name]]', '[[module-name]]');
        return self::RestoreByFilter($storage, ['id' => array_map(fn($v) => (int)$v, $ids)]);
    }


    /**
     * Deletes rows by filters
     * @param array $filter filters array
     * @return bool
     */
    public static function DeleteAllByFilter(array $filter): bool
    {
        $storage = Storages::Create()->Load('[[storage-name]]', '[[module-name]]');
        return self::DeleteByFilter($storage, $filter);
    }

    /**
     * Migrates an object
     * @param ?Logger $logger
     */
    public static function DataMigrate(?Logger $logger = null): bool
    {
        // миграция данных
        return true;
    }

}